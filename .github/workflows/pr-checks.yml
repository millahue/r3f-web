name: PR Quality Checks

on:
  pull_request:
    branches: ['main', 'develop']
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # AI-powered code review
  ai-code-review:
    name: AI Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: AI Code Review with Qodana
        uses: JetBrains/qodana-action@v2023.3
        with:
          args: --baseline,qodana.sarif.json
        env:
          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Security and vulnerability checks
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level moderate

      - name: Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: GitGuardian scan
        uses: GitGuardian/ggshield-action@v1.25.0
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

  # Code quality and standards
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: ESLint Analysis
        run: |
          npm run lint -- --format=@microsoft/eslint-formatter-sarif --output-file=eslint-results.sarif
        continue-on-error: true

      - name: Upload ESLint results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: eslint-results.sarif
          wait-for-processing: true

      - name: Prettier Check
        run: npm run format:check

      - name: TypeScript Check
        run: npx tsc --noEmit

  # Performance and lighthouse checks
  performance:
    name: Performance Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for performance testing
        run: npm run build

      - name: Lighthouse Performance Test
        uses: treosh/lighthouse-ci-action@v11
        with:
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Bundle Size Analysis
        uses: andresz1/size-limit-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

  # Accessibility checks
  accessibility:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production

      - name: Wait for app to be ready
        run: npx wait-on http://localhost:3000 --timeout 30000

      - name: Run axe accessibility tests
        uses: microsoft/playwright-github-action@v1
        with:
          browsers: chromium

      - name: Accessibility Test with axe-core
        run: |
          npm install -g @axe-core/cli
          axe http://localhost:3000 --exit

  # Comment PR with results
  pr-summary:
    name: PR Quality Summary
    runs-on: ubuntu-latest
    needs:
      [ai-code-review, security-scan, code-quality, performance, accessibility]
    if: always()
    steps:
      - name: Create PR Comment
        uses: actions/github-script@v7
        with:
          script: |
            const { context } = require('@actions/github');

            const results = {
              'AI Code Review': '${{ needs.ai-code-review.result }}',
              'Security Scan': '${{ needs.security-scan.result }}',
              'Code Quality': '${{ needs.code-quality.result }}',
              'Performance': '${{ needs.performance.result }}',
              'Accessibility': '${{ needs.accessibility.result }}'
            };

            const getEmoji = (result) => {
              switch(result) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '🚫';
                default: return '⚠️';
              }
            };

            let body = '## 🤖 AI Quality Report\n\n';
            body += '| Check | Status |\n';
            body += '|-------|--------|\n';

            for (const [check, result] of Object.entries(results)) {
              body += `| ${check} | ${getEmoji(result)} ${result} |\n`;
            }

            body += '\n---\n';
            body += '**🔍 Powered by AI:** CodeRabbit, Qodana, SonarCloud\n';
            body += '**🛡️ Security:** Snyk, GitGuardian, npm audit\n';
            body += '**📊 Performance:** Lighthouse CI, Bundle Analyzer\n';
            body += '**♿ Accessibility:** axe-core testing\n';

            const allPassed = Object.values(results).every(r => r === 'success');
            if (allPassed) {
              body += '\n🎉 **All checks passed!** This PR is ready for review.';
            } else {
              body += '\n⚠️ **Some checks failed.** Please review and fix issues before merging.';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
